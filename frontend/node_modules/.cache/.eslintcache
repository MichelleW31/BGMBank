[{"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/index.tsx":"1","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/App.tsx":"2","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/LoginSignUpView/LoginSignUpView.tsx":"3","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Login/Login.tsx":"4","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Signup/Signup.tsx":"5","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Image/Image.tsx":"6"},{"size":557,"mtime":1671140718479,"results":"7","hashOfConfig":"8"},{"size":1377,"mtime":1671140595105,"results":"9","hashOfConfig":"8"},{"size":421,"mtime":1671140625027,"results":"10","hashOfConfig":"8"},{"size":2258,"mtime":1671237547055,"results":"11","hashOfConfig":"8"},{"size":7936,"mtime":1673278200604,"results":"12","hashOfConfig":"8"},{"size":321,"mtime":1671140608412,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11uo07z",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/index.tsx",[],[],"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/App.tsx",[],[],"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/LoginSignUpView/LoginSignUpView.tsx",[],[],"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Login/Login.tsx",[],[],"/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Signup/Signup.tsx",["33","34","35","36","37"],[],"/* eslint-disable @typescript-eslint/no-misused-promises */\nimport styles from './Signup.module.scss';\nimport {ReactElement, useRef, useState, useEffect} from 'react';\nimport Image from 'components/Image/Image';\nimport {NavLink} from 'react-router-dom';\nimport {faCheck, faTimes, faInfoCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nconst Signup = (): ReactElement => {\n  const [user, setUser] = useState<{username: string; password: string; passwordMatch: string}>({\n    username: '',\n    password: '',\n    passwordMatch: '',\n  });\n  const [validName, setValidName] = useState(false);\n  const [userFocus, setUserFocus] = useState(false);\n\n  const [validPassword, setValidPassword] = useState(false);\n  const [passwordFocus, setPasswordFocus] = useState(false);\n\n  const [validMatch, setValidMatch] = useState(false);\n  const [matchFocus, setMatchFocus] = useState(false);\n\n  const [success, setSuccess] = useState(false);\n\n  const [errors, setErrors] = useState<{errorStatus: boolean; errorMessage: string}>({\n    errorStatus: false,\n    errorMessage: '',\n  });\n\n  const {username, password, passwordMatch} = user;\n  const {errorStatus, errorMessage} = errors;\n\n  const errorCheck = (): void => {\n    const message: string = 'Please enter a valid username and password.';\n\n    // empty credentials error\n    if (username === '' || password === '' || passwordMatch === '') {\n      setErrors({...errors, errorStatus: true, errorMessage: message});\n    } else {\n      setErrors({...errors, errorStatus: false, errorMessage: ''});\n    }\n  };\n\n  const USER_REGEX = /^[a-zA-Z][a-zA-Z0-9-_]{3,23}$/;\n  const PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n\n  const userRef = useRef<HTMLInputElement>(null);\n  const errRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (userRef.current !== null) {\n      userRef.current.focus();\n    }\n  }, []);\n\n  useEffect(() => {\n    setValidName(USER_REGEX.test(username));\n  }, [username]);\n\n  useEffect(() => {\n    setValidPassword(PASSWORD_REGEX.test(password));\n    setValidMatch(password === passwordMatch);\n  }, [password, passwordMatch]);\n\n  useEffect(() => {\n    setErrors({...errors, errorStatus: false, errorMessage: ''});\n  }, [username, password, passwordMatch]);\n\n  const signUp = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n    const v1 = USER_REGEX.test(username);\n    const v2 = PASSWORD_REGEX.test(password);\n    if (!v1 || !v2) {\n      setErrors({...errors, errorStatus: true, errorMessage: 'Invalid Entry'});\n      return;\n    }\n    errorCheck();\n  };\n\n  return (\n    <section className={styles.SignupContainer}>\n      <Image />\n      <section className={styles.SignupForm}>\n        <h2 className={styles.FormHeaderCopy}>Signup</h2>\n        <form onSubmit={signUp}>\n          <label hidden htmlFor='username'>\n            Username:\n          </label>\n          <section className={styles.Input}>\n            <section className={styles.InputArrowContainer}>\n              <input\n                type='text'\n                id='username'\n                ref={userRef}\n                autoComplete='off'\n                required\n                aria-invalid={validName ? 'false' : 'true'}\n                aria-describedby='uidnote'\n                placeholder='Username'\n                value={username}\n                onChange={(e) => setUser({...user, username: e.target.value})}\n                onFocus={() => setUserFocus(true)}\n                onBlur={() => setUserFocus(false)}\n              />\n              {validName && (\n                <span className={styles.Valid}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </span>\n              )}\n              {validName || username === '' ? null : (\n                <span className={styles.Invalid}>\n                  <FontAwesomeIcon icon={faTimes} />\n                </span>\n              )}\n            </section>\n            <p\n              id='uidnote'\n              className={userFocus && username !== '' && !validName ? styles.Instructions : styles.Offscreen}\n            >\n              <FontAwesomeIcon icon={faInfoCircle} />4 to 24 characters\n              <br /> Must begin with a letter. <br /> Letters, number, underscores, hyphens allowed.\n            </p>\n          </section>\n\n          <label hidden htmlFor='password'>\n            Password:\n          </label>\n          <section className={styles.Input}>\n            <section className={styles.InputArrowContainer}>\n              <input\n                type='password'\n                id='password'\n                required\n                aria-invalid={validPassword ? 'false' : 'true'}\n                aria-describedby='pwdnote'\n                placeholder='Password'\n                value={password}\n                onChange={(e) => setUser({...user, password: e.target.value})}\n                onFocus={() => setPasswordFocus(true)}\n                onBlur={() => setPasswordFocus(false)}\n              />\n              {validPassword && (\n                <span className={styles.Valid}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </span>\n              )}\n              {validPassword || password === '' ? null : (\n                <span className={styles.Invalid}>\n                  <FontAwesomeIcon icon={faTimes} />\n                </span>\n              )}\n            </section>\n            <p id='pwdnote' className={passwordFocus && !validPassword ? styles.Instructions : styles.Offscreen}>\n              <FontAwesomeIcon icon={faInfoCircle} />8 to 24 characters\n              <br /> Must include uppercase and lowercase letters, a number and a special character. <br /> Allowed\n              special characters: <span aria-label='exclamation mark'>!</span> <span aria-label='at symbol'>@</span>{' '}\n              <span aria-label='hashtag'>#</span> <span aria-label='dollar sign'>$</span>{' '}\n              <span aria-label='percent'>%</span>\n            </p>\n          </section>\n\n          <label hidden htmlFor='confirm_pwd'>\n            Confirm Password:\n          </label>\n          <section className={styles.Input}>\n            <section className={styles.InputArrowContainer}>\n              <input\n                type='password'\n                id='confirm_pwd'\n                placeholder='Confirm Password'\n                required\n                aria-invalid={validMatch ? 'false' : 'true'}\n                aria-describedby='confirmnote'\n                onChange={(e) => setUser({...user, passwordMatch: e.target.value})}\n                onFocus={() => setMatchFocus(true)}\n                onBlur={() => setMatchFocus(false)}\n              />\n              {validMatch && passwordMatch !== '' && (\n                <span className={styles.Valid}>\n                  <FontAwesomeIcon icon={faCheck} />\n                </span>\n              )}\n              {validMatch || passwordMatch === '' ? null : (\n                <span className={styles.Invalid}>\n                  <FontAwesomeIcon icon={faTimes} />\n                </span>\n              )}\n            </section>\n            <p id='confirmnote' className={matchFocus && !validMatch ? styles.Instructions : styles.Offscreen}>\n              <FontAwesomeIcon icon={faInfoCircle} />\n              Must match password entered.\n            </p>\n          </section>\n\n          <button className={styles.SignupButton} disabled={!validMatch}>\n            Signup\n          </button>\n        </form>\n\n        {errorStatus && (\n          <p ref={errRef} aria-live='assertive' className={styles.Error}>\n            {errorMessage}\n          </p>\n        )}\n\n        <section className={styles.ExistingAccountCopy}>\n          <p>Already have an account?</p>\n          <p>\n            <NavLink to='/'>Login</NavLink>\n          </p>\n        </section>\n      </section>\n    </section>\n  );\n};\n\nexport default Signup;\n","/Users/mwilliams/Desktop/PersonalProjects/JobSearch/bgm-bank/frontend/src/components/Image/Image.tsx",[],[],{"ruleId":"38","severity":1,"message":"39","line":24,"column":10,"nodeType":"40","messageId":"41","endLine":24,"endColumn":17},{"ruleId":"38","severity":1,"message":"42","line":24,"column":19,"nodeType":"40","messageId":"41","endLine":24,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":59,"column":6,"nodeType":"45","endLine":59,"endColumn":16,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":64,"column":6,"nodeType":"45","endLine":64,"endColumn":31,"suggestions":"48"},{"ruleId":"43","severity":1,"message":"49","line":68,"column":6,"nodeType":"45","endLine":68,"endColumn":41,"suggestions":"50"},"@typescript-eslint/no-unused-vars","'success' is assigned a value but never used.","Identifier","unusedVar","'setSuccess' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'USER_REGEX'. Either include it or remove the dependency array.","ArrayExpression",["51"],"React Hook useEffect has a missing dependency: 'PASSWORD_REGEX'. Either include it or remove the dependency array.",["52"],"React Hook useEffect has a missing dependency: 'errors'. Either include it or remove the dependency array. You can also do a functional update 'setErrors(e => ...)' if you only need 'errors' in the 'setErrors' call.",["53"],{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [USER_REGEX, username]",{"range":"60","text":"61"},"Update the dependencies array to be: [PASSWORD_REGEX, password, passwordMatch]",{"range":"62","text":"63"},"Update the dependencies array to be: [username, password, passwordMatch, errors]",{"range":"64","text":"65"},[2019,2029],"[USER_REGEX, username]",[2158,2183],"[PASSWORD_REGEX, password, passwordMatch]",[2278,2313],"[username, password, passwordMatch, errors]"]